[
  {
    "id": "0",
    "title": "React Router DOM in a React App - Simple Way",
    "author": "Tahir",
    "date_published": "2024-07-22",
    "content": {
      "introduction": "React Router DOM is a library that allows you to implement routing in your React application. It enables navigation between different components without reloading the page, providing a seamless user experience.",
      "sections": [
        {
          "section_title": "Installing React Router DOM",
          "section_content": "First, install React Router DOM in your app by running the following command.",
          "code_snippet": "npm install react-router-dom",
          "additional_info": "This command installs the React Router DOM library, which provides components and functions for routing in React."
        },
        {
          "section_title": "Setting up Browser Router",
          "section_content": "Navigate to your `index.js` or `main.js` file. Import `BrowserRouter` from `react-router-dom` and wrap the `App` component with `BrowserRouter`.",
          "code_snippet": "import { BrowserRouter } from 'react-router-dom';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App.jsx';\nimport './index.css';\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);",
          "additional_info": "Wrapping the `App` component with `BrowserRouter` enables routing in the app by providing the necessary context for routing components."
        },
        {
          "section_title": "Setting up Routes",
          "section_content": "Navigate to `App.jsx` and import `Routes` and `Route` from `react-router-dom`. Then, import the necessary components where you want to apply navigation.",
          "code_snippet": "import { Routes, Route } from 'react-router-dom';\nimport Home from './Pages/Home';\nimport About from './Pages/About';\nimport Contact from './Pages/Contact';\n\nfunction App() {\n  return (\n    <>\n      <Routes>\n        <Route path='/' element={<Home />} />\n        <Route path='/about' element={<About />} />\n        <Route path='/contact' element={<Contact />} />\n      </Routes>\n    </>\n  );\n}\n\nexport default App;",
          "additional_info": "The `Routes` component is used to define multiple `Route` components. Each `Route` specifies a path and the corresponding component to render when the path is accessed."
        },
        {
          "section_title": "Creating a Navbar Component",
          "section_content": "Create a new file `Nav.jsx`, import `Link` from `react-router-dom`, and use it to create navigation links that move to other pages without reloading.",
          "code_snippet": "import { Link } from 'react-router-dom';\n\nconst Navbar = () => {\n  return (\n    <div className='navbar'>\n      <ul>\n        <li><Link to='/'>Home</Link></li>\n        <li><Link to='/about'>About</Link></li>\n        <li><Link to='/contact'>Contact</Link></li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Navbar;",
          "additional_info": "The `Link` component allows navigation between routes without a full page reload. This creates a smoother and faster user experience."
        },
        {
          "section_title": "Including the Navbar in Your App",
          "section_content": "Make sure to call the `Navbar` component in `App.jsx` to include it in your application.",
          "code_snippet": "import Navbar from './Components/Navbar/Navbar';\nimport { Routes, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <>\n      <Navbar />\n      <Routes>\n        <Route path='/' element={<Home />} />\n        <Route path='/about' element={<About />} />\n        <Route path='/contact' element={<Contact />} />\n      </Routes>\n    </>\n  );\n}\n\nexport default App;",
          "additional_info": "Including the `Navbar` component ensures that navigation links are available on all pages, providing consistent navigation throughout your application."
        }
      ]
    },
    "tags": ["React", "Web Dev", "Routing"],
    "metadata": {
      "word_count": 450,
      "read_time": "5 minutes"
    }
  },
  {
    "id": "1",
    "title": "React Router DOM - Advanced",
    "date_published": "2024-07-23",
    "author": "Tahir",
    "content": {
      "introduction": "React Router DOM is a library that allows you to implement routing in your React application. This guide will show you how to set up and use React Router DOM to navigate between different pages in your app without reloading the entire page.",
      "sections": [
        {
          "section_title": "How to install react-router-dom?",
          "section_content": "To install react-router-dom. Use the following command",
          "code_snippet_title": "Command to run",
          "code_snippet": "npm install react-router-dom",
          "images": [],
          "additional_info": "",
          "recommendation": ""
        },
        {
          "section_title": "Create a Navbar",
          "section_content": "Create a header in which the user can see all the pages to visit. Use the Link and NavLink feature of react-router-dom. Link is simply used to redirect the user to any page. NavLink is similar to Link but we can style the active link in this. To style the active link we use a callback which accepts one argument isActive. If isActive is true, then it applies the style to the active link.",
          "code_snippet_title": "See the Example",
          "code_snippet": "import { Link, NavLink } from \"react-router-dom\"\nimport '../index.css'\nconst Header = () => {\n    return (\n      <nav>\n        <NavLink to='/' className={({ isActive }) => (isActive ? 'active' : '')}>Home</NavLink>\n        <NavLink to='/about' className={({ isActive }) => (isActive ? 'active' : '')}>About</NavLink>\n        <NavLink to='/contact' className={({ isActive }) => (isActive ? 'active' : '')}>Contact</NavLink>\n      </nav>\n    );\n  }\n  \n  export default Header;",
          "images": [],
          "additional_info": "I assume that you should have code for Home, About, and Contact Pages. If you do not have then you should pick up starter code from the next step.",
          "recommendation": ""
        },
        {
          "section_title": "Now Create Routes",
          "section_content": "Now navigate to main.jsx or index.jsx. Import RouterProvider, createBrowserRouter, createRoutesFromElements, and Routes from react-router-dom. RouterProvider will accept an object which creates routes. createBrowserRouter is a function that specifies the different routes (URLs) that the app will handle and what components should be rendered for each route. Routes will define and manage the different routes in your application. Path defines where to move. Element defines which component to render.",
          "code_snippet_title": "Below is the code",
          "code_snippet": "import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.jsx'\nimport './index.css'\nimport { Route, RouterProvider, createBrowserRouter, createRoutesFromElements } from 'react-router-dom'\nimport Home from './pages/Home.jsx'\nimport Layout from './components/Layout.jsx'\nimport About from './pages/About.jsx'\nimport Contact from './pages/Contact.jsx'\nimport User from './pages/User.jsx'\n\nconst router = createBrowserRouter(\n  createRoutesFromElements(\n  <Route path='/' element={<Layout />}>\n    <Route path='' element={<Home />} />\n    <Route path='about' element={<About />} />\n    <Route path='contact' element={<Contact />} />\n  </Route>\n  )\n)\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    {/* <App /> */}\n    <RouterProvider router={router} />\n  </React.StrictMode>,\n)",
          "images": [],
          "additional_info": "",
          "recommendation": ""
        },
        {
          "section_title": "Create a Layout Component",
          "section_content": "The Layout component helps make sure all your pages look similar. It includes things like a header at the top and a footer at the bottom. The Outlet is where the main content of each page appears, and it changes based on the page you are on.",
          "code_snippet_title": "Code to create Layout",
          "code_snippet": "// components/Layout.jsx \nimport Header from \"./Header\"\nimport Footer from \"./Footer\"\nimport {Outlet} from 'react-router-dom';\nconst Layout = () =>{\n    return(\n        <>\n            <Header />\n            <Outlet />                {/* it will change the component on user request  */}\n            <Footer />\n        </>\n    )\n}\nexport default Layout",
          "images": [],
          "additional_info": "Outlet replaces the component with the user-requested component.",
          "recommendation": ""
        },
        {
          "section_title": "UseParams",
          "section_content": "The useParams hook is used to read the parameters from the current route. This is useful for accessing dynamic parts of the URL, like user IDs.",
          "code_snippet_title": "Code to create User component",
          "code_snippet": "import { useParams } from \"react-router-dom\"\nconst User=()=>{\n    const {userId} = useParams()\n    console.log(userId)\n    return(\n        <>\n            <h1>User: {userId}</h1>\n        </>\n    )\n}\nexport default User",
          "images": [],
          "additional_info": "useParams allows you to extract parameters from the URL, such as userId in this example. This can be used to display user-specific information.",
          "recommendation": ""
        }
      ]
    },
    "tags": ["React", "Web Development", "UseParams"],
    "metadata": {
      "word_count": 950,
      "read_time": "10 minutes"
    }
  },
  {
    "id": "2",
    "title": "Using useContext in React",
    "date_published": "2024-07-23",
    "author": "Tahir",
    "content": {
      "introduction": "The useContext hook in React allows you to use the React Context API more easily. It is used to share data that can be considered 'global' for a tree of React components, such as the current authenticated user, theme, or preferred language.",
      "sections": [
        {
          "section_title": "What is Context?",
          "section_content": "Context provides a way to pass data through the component tree without having to pass props down manually at every level. It is designed to share data that can be considered global for a tree of React components."
        },
        {
          "section_title": "How to Create a Context",
          "section_content": "To create a context, first create a Contexts folder inside the src directory. Create a file with AnyNameContext.js. Import React and useContext. Now create context by method createContext().",
          "code_snippet_title": "Contexts/UserContext.js",
          "code_snippet": "import React from \"react\";\nimport { createContext } from \"react\";\n\nconst UserContext = createContext();\n\nexport default UserContext;"
        },
        {
          "section_title": "Provide the Context",
          "section_content": "In the previous step, we successfully created a context. Now we need to provide this context to the components that will use it."
        },
        {
          "section_title": "Create a Provider Component",
          "section_content": "Create a new file in the Contexts folder named AnyNameContextProvider.jsx. Now import the context you have created. Create a method with the same name as the file name and export it. It accepts parameters {children}. Return the children in the function and wrap it with the context you created. Also specify the provider and pass the value you want to pass. First create the value and then pass it.",
          "code_snippet_title": "Contexts/UserContextProvider.jsx",
          "code_snippet": "import React, { useState } from \"react\";\nimport UserContext from \"./UserContext\";\n\nconst UserContextProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    \n    return (\n        <UserContext.Provider value={{ user, setUser }}>\n            {children}\n        </UserContext.Provider>\n    );\n};\n\nexport default UserContextProvider;"
        },
        {
          "section_title": "Wrap the App with the Provider",
          "section_content": "Now, wrap the app with the provider you created. This makes the context available to all components within the app.",
          "code_snippet_title": "src/App.jsx",
          "code_snippet": "import React from 'react';\nimport UserContextProvider from './Contexts/UserContextProvider';\nimport Login from './components/Login';\nimport User from './components/User';\n\nconst App = () => {\n    return (\n        <UserContextProvider>\n            <Login />\n            <User />\n        </UserContextProvider>\n    );\n};\n\nexport default App;"
        },
        {
          "section_title": "Use the Context in a Component",
          "section_content": "To consume the context in a functional component, use the useContext hook. This allows you to access the context value directly.",
          "code_snippet_title": "components/Login.jsx",
          "code_snippet": "import { useState, useContext } from \"react\";\nimport UserContext from \"../Contexts/UserContext\";\n\nconst Login = () => {\n    const [username, setUserName] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const { setUser } = useContext(UserContext);\n\n    const handleSubmission = (e) => {\n        e.preventDefault();\n        setUser({ username, password });\n    };\n\n    return (\n        <>\n            <input\n                type=\"text\"\n                name=\"username\"\n                id=\"username\"\n                onChange={(e) => setUserName(e.target.value)}\n            />\n            <input\n                type=\"password\"\n                name=\"password\"\n                id=\"password\"\n                onChange={(e) => setPassword(e.target.value)}\n            />\n            <button onClick={handleSubmission}>Login</button>\n        </>\n    );\n};\n\nexport default Login;"
        },
        {
          "section_title": "Display the Context Value",
          "section_content": "To display the context value in another component, use the useContext hook to access the value and display it as needed.",
          "code_snippet_title": "components/User.jsx",
          "code_snippet": "import { useContext } from \"react\";\nimport UserContext from \"../Contexts/UserContext\";\n\nconst User = () => {\n    const { user } = useContext(UserContext);\n\n    return (\n        <>\n            <h1>Username is {user ? user.username : \"Nothing found\"}</h1>\n        </>\n    );\n};\n\nexport default User;"
        }
      ]
    },
    "tags": ["React", "useContext", "Web Dev"],
    "metadata": {
      "word_count": 620,
      "read_time": "7 minutes"
    }
  },
  {
    "id": "3",
    "title": "Another Method to use useContext",
    "date_published": "2024-07-24",
    "author": "Tahir",
    "content": {
      "introduction": "This documentation provides a detailed guide on how to use useContext in React by creating a custom context and using it within your application.",
      "sections": [
        {
          "section_title": "Create a Context Folder",
          "section_content": "Create a new folder named Contexts. Inside this folder, create a new file named UserContext.js."
        },
        {
          "section_title": "Create the Context",
          "section_content": "Import createContext from React. Create a function using createContext() and pass an object with any values you want to share with components."
        },
        {
          "section_title": "Create a Provider",
          "section_content": "Create a function to provide the context to your components."
        },
        {
          "section_title": "Create a Custom Hook",
          "section_content": "Create a hook called UseProvider that uses useContext() to access the context you created.",
          "code_snippet_title": "Contexts/UserContext.js",
          "code_snippet": "import React from \"react\";\nimport { createContext, useContext } from \"react\";\n\nexport const UserContext = createContext({\n    username: null,\n    setUsername: () => {},\n    password: null,\n    setPassword: () => {}\n});\n\n// Create Provider\nexport const UserProvider = UserContext.Provider;\n\n// Create custom hook\nexport default function UseProvider() {\n    return useContext(UserContext);\n}"
        },
        {
          "section_title": "Wrap the App",
          "section_content": "Wrap your app with the UserProvider to provide the context to your components.",
          "code_snippet_title": "App.js",
          "code_snippet": "import './App.css';\nimport { useState } from 'react';\nimport { UserProvider } from './Contexts/UserContext';\nimport Login from './components/Login';\nimport User from './components/User';\n\nfunction App() {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    return (\n        <>\n            {/* Provide context values to components */}\n            <UserProvider value={{ username, setUsername, password, setPassword }}>\n                <h1>Mr Tahir</h1>\n                <Login />\n                <User />\n            </UserProvider>\n        </>\n    );\n}\n\nexport default App;"
        },
        {
          "section_title": "Sending Component",
          "section_content": "Create a component that sends data, for example, the Login component sends data to the User component.",
          "code_snippet_title": "Login.js",
          "code_snippet": "import { useState } from \"react\";\nimport UseProvider from \"../Contexts/UserContext\";\n\nconst Login = () => {\n    const [user, setUser] = useState(\"\");\n    const [pass, setPass] = useState(\"\");\n    const { setUsername, setPassword } = UseProvider();\n\n    const handleForm = () => {\n        setUsername(user);\n        setPassword(pass);\n    };\n\n    return (\n        <>\n            <input\n                type=\"text\"\n                name=\"username\"\n                id=\"username\"\n                onChange={(e) => setUser(e.target.value)}\n            />\n            <input\n                type=\"password\"\n                name=\"password\"\n                id=\"password\"\n                onChange={(e) => setPass(e.target.value)}\n            />\n            <button onClick={handleForm}>Login</button>\n        </>\n    );\n};\n\nexport default Login;"
        },
        {
          "section_title": "Receiving Component",
          "section_content": "Create a component that receives data, for example, the User component utilizes the received user data.",
          "code_snippet_title": "User.js",
          "code_snippet": "import UseProvider from \"../Contexts/UserContext\";\n\nconst User = () => {\n    const { username, password } = UseProvider();\n\n    return (\n        <>\n            <h1>Username is {username ? username : \"Nothing found\"}</h1>\n            <h1>Password is {password ? password : \"Nothing found\"}</h1>\n        </>\n    );\n};\n\nexport default User;"
        }
      ]
    },
    "tags": ["React", "useContext", "Context API", "JavaScript", "Web Development"],
    "metadata": {
      "word_count": 320,
      "read_time": "4 minutes"
    }
  }  
  
  
  
  
  
  


  
  
  
  
  
  
  
  
]
